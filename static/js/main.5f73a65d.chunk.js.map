{"version":3,"sources":["components/Firebase/firebase-config.js","components/Firebase/firebase-creds.js","components/JobSummary/index.js","constants/routes.js","components/Landing/index.js","components/Footer/index.js","components/FullJob/index.js","components/JobPage/index.js","components/SignIn/index.js","components/SignUp/index.js","components/Navigation/index.js","components/MyJobs/index.js","components/BeforePostChecklist/index.js","components/JobForm/JobForm.js","components/SubmitJob/index.js","components/JobPreview/index.js","components/EditJob/index.js","components/MakeRemoveAdmin/index.js","components/AdminOnly/index.js","components/ForgotPassword/index.js","components/App/index.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","auth","getAuth","JobSummary","job","expiryDate","Date","expiry_date","toDateString","className","to","pathname","id","state","title","company","location","salary","published_on","substring","LANDING","MY_JOBS","SUBMIT_JOB","EDIT_JOB","ADMIN_LIST_JOBS","MAKE_REMOVE_ADMIN","SIGN_UP","SIGN_IN","FORGOT_PASSWORD","LandingPage","jobs","currentUser","getApprovedCurrentJobs","filter","approved","getJobSummaries","map","length","ROUTES","Footer","getFullYear","href","alt","src","FullJob","isAdmin","approveJob","unPublishJob","toLocaleDateString","approvedDate","getTime","creator_id","uid","Button","onClick","variant","remarkPlugins","remarkGfm","description","company_website","target","rel","Card","Body","closing_date","seconds","email","contact_name","link_to_job","JobPage","useLocation","SignIn","logIn","useState","signInEmail","setSignInEmail","signInPassword","setSignInPassword","errorMessage","setErrorMessage","handleLogInButtonClick","evt","a","preventDefault","code","console","log","Container","Row","Col","md","span","offset","Form","Group","size","controlId","Label","Control","autoFocus","type","value","onChange","Alert","disabled","SignUp","register","registerName","setRegisterName","registerEmail","setRegisterEmail","registerPassword","setRegisterPassword","registerConfirmPassword","setRegisterConfirmPassword","userMarketingOptIn","setUserMarketingOptIn","handleSignUpButtonClick","class","autoComplete","Check","label","defaultChecked","NavigationBarJobBoardNonLoggedIn","Navbar","bg","expand","fixed","Brand","Toggle","Collapse","Nav","Link","NavigationBarJobBoardLoggedIn","logOut","NavDropdown","Item","ItemText","UserJobsPage","listOfUserJobs","currentUserJobs","remote","Badge","NoJobsPage","Toast","NotSignedInJobsPage","MyJobsPage","setCurrentUserJobs","useEffect","creator_by_id","BeforePostCheckList","checkOne","setCheckOne","checkTwo","setCheckTwo","checkThree","setCheckThree","checkFour","setCheckFour","checkFive","setCheckFive","checkSix","setCheckSix","checkSeven","setCheckSeven","JobForm","setFormJobTitle","setFormJobDescription","setFormJobSalary","setFormJobRemote","setFormJobContactName","setFormJobContactEmail","setFormJobPostLink","setFormJobClosingDate","setFormJobCompanyName","setFormJobCompanyLocation","setFormJobCompanyWebsite","setFormJobCompanyAddress","setFormJobCompanyPostcode","formJobRemote","required","placeholder","Feedback","as","rows","Text","SumbitJobPage","createJobPost","validated","setValidated","formJobTitle","formJobDescription","formJobSalary","formJobContactName","formJobContactEmail","formJobPostLink","formJobClosingDate","formJobCompanyName","formJobCompanyLocation","formJobCompanyWebsite","formJobCompanyAddress","formJobCompanyPostcode","data","navigate","useNavigate","document","getElementById","previewJob","jobRemoteCheck","checked","company_address","company_postcode","getJobDataFromPreview","noValidate","onSubmit","currentTarget","checkValidity","stopPropagation","handleJobPostSubmitForm","JobPreview","EditJob","updateJobPost","jobClosingDate","formFormatDate","split","reverse","join","getJobDataToEdit","MakeRemoveAdmin","makeNewAdmin","removeAdmin","makeAdminErrorMessage","setMakeAdminErrorMessage","makeAdminSuccessMessage","setMakeAdminSuccessMessage","removeAdminErrorMessage","setRemoveAdminErrorMessage","removeAdminSuccessMessage","setRemoveAdminSuccessMessage","handleNewAdminFormSubmit","adminEmail","querySelector","message","handleRemoveAdminSubmit","FormGroup","AdminOnlyJobs","listJobs","setListJobs","sort","listOfJobs","ForgotPassword","resetPasswordEmail","successMessage","setSuccessMessage","App","setJobs","setCurrentUser","setIsAdmin","jobsCollectionRef","collection","mailCollectionRef","userDetailsCollectionRef","functions","getFunctions","actionCodeSettings","url","handleCodeInApp","getJobs","getDocs","jobsData","docs","doc","onAuthStateChanged","getIdTokenResult","then","idTokenResult","claims","admin","addAdminRole","httpsCallable","newAdmin","Error","removeAdminRole","removedAdmin","createUserWithEmailAndPassword","res","createUserDetails","user","userID","addDoc","user_id","name","marketing_opt_in","date_registered","userDetails","signInWithEmailAndPassword","sendLink","sendSignInLinkToEmail","window","localStorage","setItem","signOut","sendPasswordResetEmail","created_at","createEmail","subject","text","jobToUpdate","newFields","updateDoc","jobToApprove","todayDate","sendApprovedEmail","jobToUnPublish","approveEmail","contact_email","html","exact","path","element","Landing","MyJobs","AdminOnly","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5f73a65d.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from '@firebase/firestore';\nimport { getAuth } from 'firebase/auth';\nimport { firebaseConfig } from \"./firebase-creds\";\n\n\n\nexport const app = initializeApp(firebaseConfig);\n\nexport const db = getFirestore();\n\nexport const auth = getAuth(app)","export const firebaseConfig = {\n    apiKey: \"AIzaSyBTvma9FYsobDlmfSdq1qcVAJVHteFW_VQ\",\n    authDomain: \"codebarjobboard.firebaseapp.com\",\n    projectId: \"codebarjobboard\",\n    storageBucket: \"codebarjobboard.appspot.com\",\n    messagingSenderId: \"672397721541\",\n    appId: \"1:672397721541:web:cc05c1f5aa9383e705d5ac\"\n  };\n","import { Link } from 'react-router-dom'\n\n\n\nconst JobSummary = ({job}) => {\n\n    const expiryDate = new Date(job.expiry_date).toDateString();\n\n    return (\n        <div className='job-summary-box col-md-5 col-sm-8 shadow-sm p-3 mb-4 bg-white rounded border'>\n            <Link\n                to={{\n                    pathname: `/jobs/${job.id}`\n                }}\n                state={{ job }}\n                >\n                <h3>{job.title}</h3>\n            </Link>\n            <h4 className=\"fs-6 fw-bold mb-4\">{job.company}, {job.location}</h4>\n            <div className='row'>\n                <p className='col-6'>Salary:</p>\n                <p className='col-6 fw-bold'>£{job.salary}</p>\n            </div>\n            <div className='row'>\n                <p className='col-6'>Published on:</p>\n                <p className='col-6 fw-bold'>{job.published_on.substring(0,10)}</p>\n            </div>\n            <div className='row'>\n                <p className='col-6'>Closing date:</p>\n                <p className='col-6 fw-bold'>{expiryDate}</p>\n            </div>\n            <div className='row'>\n                <p className='col-6'>Location:</p>\n                <p className='col-6 fw-bold'>{job.location}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default JobSummary;\n","export const LANDING = '/';\nexport const JOB = '/jobs/:job_id';\nexport const MY_JOBS = '/my/jobs';\nexport const SUBMIT_JOB = '/my/jobs/new'\nexport const PREVIEW_JOB = '/my/jobs/new/preview'\nexport const EDIT_JOB = '/my/jobs/job_id/edit'\nexport const ADMIN_LIST_JOBS = '/admin/jobs'\nexport const ADMIN_PREVIEW_DRAFT_JOB = '/admin/jobs/:job_id'\n\n\nexport const MAKE_REMOVE_ADMIN = '/admin/make-remove'\nexport const SIGN_UP = '/signup'\nexport const SIGN_IN = '/signin'\nexport const FORGOT_PASSWORD = '/forgot-password'\n\n\n","\nimport JobSummary from \"../JobSummary\";\nimport { Link } from \"react-router-dom\";\n\nimport * as ROUTES from '../../constants/routes.js'\n\nconst LandingPage = ({jobs, currentUser}) => {\n\n    const getApprovedCurrentJobs = jobs.filter((job) => {\n        return job.approved && new Date(job.expiry_date) > new Date();\n    });\n\n    const getJobSummaries = getApprovedCurrentJobs.map((job) => {\n        return <JobSummary job={job} key={job.id} currentUser={currentUser}></JobSummary>\n    });\n\n\n\n\n    return (\n        <div className=\"container\">\n            <h2 className=\"fw-bold\">Jobs</h2>\n            <p>There are {getApprovedCurrentJobs.length} jobs posted</p>\n            <p><Link to={{pathname: ROUTES.SUBMIT_JOB}}>Click here</Link> if you would like to post a new job</p>\n            <div className=\"row job-summaries\">{getJobSummaries}</div>\n        </div>\n    );\n};\n\nexport default LandingPage;","\n\nconst Footer = () => {\n\n\n\n    return (\n        <footer className=\"main-footer container-fluid\">\n            <div className='row py-5'>\n                <div className='col-sm-12 col-md-6 col-lg-3'>\n                    <p>&#169; {new Date().getFullYear()} codebar</p>\n                    <p className=\"contact\">\n                        Send us an email at...\n                        <a className='text-white fw-bold text-decoration-none footer-link ' href='mailto:hello@codebar.io?Subject=Hello codebar'>hello@codebar.io</a>\n                    </p>\n                </div>\n\n                <div className='col-sm-12 col-md-6 col-lg-3'>\n                    <ul className=\"list-unstyled ml-0\">\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/code-of-conduct\" >Code of Conduct</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/breach-code-of-conduct\" >Breach of Conduct</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/effective-teacher-guide\" >Coach Guide</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/student-guide\" >Student Guide</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"http://tutorials.codebar.io/\" >Tutorials</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"http://manual.codebar.io/becoming-a-sponsor\" >Becoming a Sponsor</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/faq\" >FAQ</a></li>\n                    </ul>\n                </div>\n                <div className='col-sm-12 col-md-6 col-lg-3'>\n                    <ul className=\"list-unstyled ml-0\">\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"http://stats.codebar.io/\" >Stats</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://medium.com/the-codelog\" >Blog</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://medium.com/codebar-stories\" >codebar Stories</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/coaches\" >Coaches</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/sponsors\" >Sponsors</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/events\" >Events</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"/\" >Jobs</a></li>\n                        <li><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.enthuse.com/donate/#!/\" >Donate</a></li>\n                    </ul>\n                </div>\n\n                <div className=\"col-sm-12 col-md-6 col-lg-3\">\n                    <ul className = 'row ml-0 social-media'>\n                        <li className=\"col-3\"><a href=\"https://slack.codebar.io/\">\n                                <img className = \"social-svg\" alt=\"Slack logo\" src=\"https://codebar.io/assets/svgs/slack-94e55bb3ef8e2b984e7e2d20505ab15d76df82d02ea83d7d407f0458cb8d4500.svg\"></img>\n                            </a></li>\n                        <li className=\"col-3\"><a href=\"https://github.com/codebar\" >\n                                <img className=\"social-svg\" alt=\"GitHub logo\" src=\"https://codebar.io/assets/svgs/github-ad56233a12562c8d3d76cb5a7f305a9f996e04e8a552acb8d0136fc42f694bc1.svg\"></img>\n                            </a></li>\n                        <li className=\"col-3\"><a href=\"https://facebook.com/codebarHQ\" >\n                                <img className=\"social-svg\" alt=\"Facebook logo\" src=\"https://codebar.io/assets/svgs/facebook-6517228cd19711de9bef1b66f37bddc91bdba39bc1bc89c87d556ffbc1140d60.svg\"></img>\n                            </a></li>\n                        <li className=\"col-3\"><a href=\"https://twitter.com/codebar\" >\n                            <img className=\"social-svg\" alt=\"Twitter logo\" src=\"https://codebar.io/assets/svgs/twitter-4d150c1aaf00df0a77f4872b65f4750049a5d5e715558b3cb1114b3714e54804.svg\"></img>\n                            </a></li>\n                    </ul>\n                </div>\n            </div>\n            <div className=\"row pb-2\">\n                   <div className=\"col\">\n                       <ul className=\"list-inline m-0 p-0\">\n                           <li className=\"fs-6 list-inline-item\">Registered UK and Wales charity no. 1187776</li>\n                           <li className=\"list-inline-item\"><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/cookie-policy\" >Cookie Policy</a></li>\n                           <li className=\"list-inline-item\"><a className='text-white fw-bold text-decoration-none footer-link ' href=\"https://codebar.io/privacy-policy\" >Privacy Policy</a></li>\n                       </ul>\n                   </div>\n            </div>\n        </footer>\n    );\n\n};\n\nexport default Footer;","import { Button, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes.js';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from \"remark-gfm\";\n\n\n\nconst FullJob = ({job, currentUser, isAdmin, approveJob, unPublishJob}) => {\n\n    const handleApproveButtonClick = () => {\n        approveJob(job);\n    };\n\n    const handleUnPublishButtonClick = () => {\n        unPublishJob(job);\n    };\n\n    const expiryDate = new Date(job.expiry_date).toLocaleDateString();\n    const approvedDate = job.published_on && job.published_on !== \"\" ?\n                        (new Date(job.published_on)).getTime() > 0 ?\n                        new Date(job.published_on).toLocaleDateString()\n                        :\n                        job.published_on.substring(0,10)\n                        : !job.approved ?\n                        \"Not published\"\n                        : null\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n\n                {(job.approved === false && job.creator_id === currentUser.uid) || isAdmin === true?\n                    <Link\n                        to={{\n                            pathname: ROUTES.EDIT_JOB\n                            }}\n                        state={{job}}\n                    >\n                    <Button className='button fw-bold'>Edit this job</Button></Link> : null\n                }\n\n                    {isAdmin === true?\n                        <div className='admin-info'>\n                            {job.approved === false?\n                                <Link to={{pathname: ROUTES.ADMIN_LIST_JOBS}}>\n                                    <Button onClick={handleApproveButtonClick} className='button fw-bold' variant=\"success\">Approve this job</Button>\n                                </Link> :\n                                <div>\n                                    <Link to={{pathname: ROUTES.ADMIN_LIST_JOBS}}>\n                                            <Button onClick={handleUnPublishButtonClick} className='button fw-bold' variant=\"danger\">Un-publish this job</Button>\n                                        </Link>\n                                    <p className='alert alert-primary mt-2'>This job was approved on {approvedDate}</p>\n                                </div>\n                            }\n                        </div> : null\n                    }\n            </div>\n\n            <div className=\"row mb-5\">\n                <section className='col-lg-9 col-sm-12'>\n                    <h2 className=\"mb-4\">{job.title}</h2>\n\n                    <ReactMarkdown remarkPlugins={[remarkGfm]} >{job.description}</ReactMarkdown>\n\n\n\n                    <h3 className=\"mt-4\">Company</h3>\n                    <p className=\"mb-0\">{job.company}</p>\n                    <p><a href={job.company_website} target=\"_blank\" rel=\"noreferrer\">{job.company_website}</a></p>\n                </section>\n                <section className='col-lg-3 col-sm-6'>\n                    <Card>\n                        <Card.Body>\n                            <div className=\"p-2 mb-2\">\n                                <p className=\"mb-0 fw-bold\" >Salary</p>\n                                <p className=\"mb-0\">£{job.salary}</p>\n                            </div>\n                            <div className=\"p-2 mb-2\">\n                                <p className=\"mb-0 fw-bold\" >Location</p>\n                                <p className=\"mb-0\">{job.location}</p>\n                            </div>\n                            <div className=\"p-2 mb-2\">\n                                <p className=\"mb-0 fw-bold\" >Closing date</p>\n                                { job.closing_date?.seconds? <p className=\"mb-0\">{new Date(job.closing_date.seconds * 1000).toLocaleDateString()}</p>\n                                                             : <p className=\"mb-0\">{expiryDate}</p>\n                                }\n                            </div>\n                            <div className=\"p-2 mb-2\">\n                                <p className=\"mb-0 fw-bold\" >Contact email</p>\n                                <p className=\"mb-0\">{job.email}</p>\n                            </div>\n                            { job.contact_name ? <div className=\"p-2 mb-2\">\n                                <p className=\"mb-0 fw-bold\" >Posted by</p>\n                                <p className=\"mb-0\">{job.contact_name}</p>\n                            </div> : null }\n                        </Card.Body>\n                        <Card.Footer>\n                            <Button className='button fw-bold w-100'><a className=\"text-white text-decoration-none\" href={job.link_to_job} target='blank'>Apply for this job</a></Button>\n                        </Card.Footer>\n                    </Card>\n                </section>\n            </div>\n\n        </div>\n    );\n};\n\nexport default FullJob;\n","import { useLocation } from 'react-router'\nimport FullJob from '../FullJob';\n\n\nconst JobPage = ({currentUser, isAdmin, approveJob, unPublishJob}) => {\n\n    const data = useLocation();\n    const job = data.state.job;\n\n    return (\n        <FullJob job={job} currentUser={currentUser} isAdmin={isAdmin} unPublishJob={unPublishJob} approveJob={approveJob}></FullJob>\n    );\n};\n\n\n\n\n\nexport default JobPage;\n","\nimport { useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap';\n\nimport * as ROUTES from '../../constants/routes.js'\n\n\n\nconst SignIn = ({logIn}) => {\n\n  const [signInEmail, setSignInEmail] = useState(\"\");\n  const [signInPassword, setSignInPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n\n  const handleLogInButtonClick = async (evt) => {\n    evt.preventDefault();\n    try {\n      await logIn(signInEmail, signInPassword);\n    } catch(error) {\n      if (error.code === \"auth/wrong-password\" || error.code === \"auth/user-not-found\") {\n        setErrorMessage(\"Invalid username / password\");\n      } else {\n        console.log(error.code);\n        setErrorMessage(\"Unknown error logging in\");\n      };\n    }\n  };\n\n  const validateForm = () => {\n    return signInEmail.length > 0 && signInPassword.length > 0;\n  }\n\n\n  return (\n    <Container>\n      <Row>\n        <Col md={{ span: 6, offset: 3 }}>\n          <p>Please sign in with your email and password</p>\n          <Form>\n            <Form.Group size=\"lg\" controlId=\"email\" className=\"sign-in-up-input\">\n              <Form.Label>Email*</Form.Label>\n              <Form.Control\n                autoFocus\n                type=\"email\"\n                value={signInEmail}\n                onChange={(evt) => setSignInEmail(evt.target.value)}\n              />\n            </Form.Group>\n            <Form.Group size=\"lg\" controlId=\"password\" className=\"sign-in-up-input\">\n              <Form.Label>Password*</Form.Label>\n              <Form.Control\n                type=\"password\"\n                value={signInPassword}\n                onChange={(evt) => setSignInPassword(evt.target.value)}\n              />\n            </Form.Group>\n\n            { errorMessage? <Alert variant='danger mt-4'>{errorMessage}</Alert> : null}\n\n            <Button onClick={(evt) => handleLogInButtonClick(evt)} className='button fw-bold' type=\"submit\" disabled={!validateForm()}>\n              Login\n            </Button>\n\n            <a href={ROUTES.FORGOT_PASSWORD}>I've forgotten my password</a>\n\n          </Form>\n          <hr />\n          <div>\n            <p>Don't have an account?</p>\n            <Link to={{pathname: ROUTES.SIGN_UP}}><Button className='button fw-bold' variant=\"info\">Sign up</Button></Link>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n\n};\n\nexport default SignIn;\n","import { useState } from 'react';\nimport { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport * as ROUTES from '../../constants/routes.js';\n\nconst SignUp = ({register}) => {\n\n    const [registerName, setRegisterName] = useState(\"\");\n    const [registerEmail, setRegisterEmail] = useState(\"\");\n    const [registerPassword, setRegisterPassword] = useState(\"\");\n    const [registerConfirmPassword, setRegisterConfirmPassword] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [userMarketingOptIn, setUserMarketingOptIn] = useState(true);\n\n\n\n    const isValid = () => {\n      return registerEmail.length > 0 && registerPassword.length > 0 && registerPassword === registerConfirmPassword;\n    };\n\n    const handleSignUpButtonClick = async (evt) => {\n      evt.preventDefault();\n      try {\n        await register(registerEmail, registerPassword, registerName, userMarketingOptIn);\n      } catch (error) {\n        console.log(error);\n        if (error.code === \"auth/email-already-in-use\") {\n          setErrorMessage(\"Email already in use\")\n        } else {\n          setErrorMessage(\"An error occured when registering\")\n        };\n      };\n    };\n\n    return (\n      <Container>\n        <Row>\n          <Col md={{ span: 6, offset: 3 }}>\n            <h4 class=\"mb-3\">The new codebar job board is currently in beta stage, so if you spot any issues please drop us an email <a href=\"mailto:hello@codebar.io\">hello@codebar.io</a>.</h4>\n            <p>Sign up to post jobs to the codebar Job Board and get your opportunity in front of our 12,000+ person community.</p>\n            <Form>\n\n            <Form.Group size=\"lg\" controlId=\"name\" className=\"sign-in-up-input\">\n                <Form.Label>Full name*</Form.Label>\n                <Form.Control\n                  autoFocus\n                  type=\"name\"\n                  autoComplete='username'\n                  value={registerName}\n                  onChange={(evt) => setRegisterName(evt.target.value)}\n                />\n              </Form.Group>\n\n              <Form.Group size=\"lg\" controlId=\"email\" className=\"sign-in-up-input\">\n                <Form.Label>Email*</Form.Label>\n                <Form.Control\n                  autoFocus\n                  type=\"email\"\n                  autoComplete='username'\n                  value={registerEmail}\n                  onChange={(evt) => setRegisterEmail(evt.target.value)}\n                />\n              </Form.Group>\n\n              <Form.Group size=\"lg\" controlId=\"password\" className=\"sign-in-up-input\">\n                <Form.Label>Password*</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  autoComplete='new-password'\n                  value={registerPassword}\n                  onChange={(evt) => setRegisterPassword(evt.target.value)}\n                />\n              </Form.Group>\n              <Form.Group size=\"lg\" controlId=\"password\" className=\"mb-4 sign-in-up-input\">\n                <Form.Label>Confirm password*</Form.Label>\n                <Form.Control\n                  type=\"password\"\n                  autoComplete='new-password'\n                  value={registerConfirmPassword}\n                  onChange={(evt) => setRegisterConfirmPassword(evt.target.value)}\n                />\n              </Form.Group>\n\n              <Form.Group className=\"mb-3\" controlId=\"job-remote\">\n                    <Form.Check type='checkbox' label=\"Un-check this box to opt out of marketing emails\" defaultChecked = {userMarketingOptIn} onChange={() => {setUserMarketingOptIn(!userMarketingOptIn)}}></Form.Check>\n              </Form.Group>\n\n              <Button onClick={(evt) => handleSignUpButtonClick(evt)} className='button' type=\"submit\" disabled={!isValid()}>\n                  Sign up\n              </Button>\n\n                {errorMessage? <Alert variant='danger'>{errorMessage}</Alert> : null}\n\n            </Form>\n            <hr/>\n            <div>\n              <p>Already have an account?</p>\n              <Link to={{pathname: ROUTES.SIGN_IN}}><Button className='button fw-bold' variant=\"info\">Sign in</Button></Link>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n};\n\nexport default SignUp;\n","\n\nimport { Navbar, Container, Nav, NavDropdown } from 'react-bootstrap';\n\n\n\nimport * as ROUTES from '../../constants/routes'\n\n\n\nconst NavigationBarJobBoardNonLoggedIn = () => {\n\n    \n\n    return (\n        <Navbar bg=\"white\" expand=\"lg\" fixed=\"top\">\n        <Container>\n            <Navbar.Brand href=\"https://www.codebar.io\"><img id='header-logo' alt='codebar logo' src=\"https://codebar.io/assets/logo-7345316d16a39b0a5cda277d2cf4cbf3aed1031b9288c0696b8273771ee1fb20.png\"></img></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"ms-auto\">\n                <Nav.Link href={ROUTES.LANDING}>Job Board</Nav.Link>\n                <Nav.Link href={ROUTES.SIGN_UP}>Sign up</Nav.Link>\n                <Nav.Link href={ROUTES.SIGN_IN}>Sign in</Nav.Link>\n            </Nav>\n            </Navbar.Collapse>\n        </Container>\n    </Navbar>\n    );\n};\n\nconst NavigationBarJobBoardLoggedIn = ({currentUser, logOut, isAdmin}) => {\n\n\n    return (\n\n        <Navbar bg=\"white\" expand=\"lg\" fixed=\"top\">\n                <Container>\n                    <Navbar.Brand href=\"https://www.codebar.io\"><img id='header-logo' alt='codebar logo' src=\"https://codebar.io/assets/logo-7345316d16a39b0a5cda277d2cf4cbf3aed1031b9288c0696b8273771ee1fb20.png\"></img></Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"ms-auto\">\n                        <Nav.Link href=\"https://codebar.enthuse.com/donate/#!/\">Donate</Nav.Link>\n                        <Nav.Link href={ROUTES.LANDING}>Job Board</Nav.Link>\n                        <Nav.Link href={ROUTES.MY_JOBS}>My Jobs</Nav.Link>\n                        <Nav.Link href={ROUTES.SUBMIT_JOB}>Post a Job</Nav.Link>\n                        <NavDropdown title=\"My Account\" id=\"basic-nav-dropdown\">\n                            { isAdmin===true? <NavDropdown.Item href={ROUTES.ADMIN_LIST_JOBS}>Jobs to approve</NavDropdown.Item> : null}\n                            { isAdmin===true? <NavDropdown.Item href={ROUTES.MAKE_REMOVE_ADMIN}>Edit admin rights</NavDropdown.Item> : null}\n                            <NavDropdown.ItemText><p>Logged in as {currentUser.email}</p></NavDropdown.ItemText>\n                            <NavDropdown.Item onClick={logOut}>Sign Out</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n    );\n};\n\nexport {NavigationBarJobBoardNonLoggedIn, NavigationBarJobBoardLoggedIn};","import { useState, useEffect } from 'react';\nimport * as ROUTES from '../../constants/routes.js'\nimport { Link } from 'react-router-dom';\nimport SignIn from '../SignIn';\nimport { Button, Toast, Badge } from 'react-bootstrap';\n\n\nconst MyJobsPage = ({currentUser, jobs, logIn}) => {\n\n    const [currentUserJobs, setCurrentUserJobs] = useState([]);\n\n    useEffect(() => {\n        if (currentUser) {\n            const currentUserJobs = jobs.filter(job => job.creator_by_id === currentUser.uid);\n            setCurrentUserJobs(currentUserJobs)\n        }\n    }, [currentUser, jobs]);\n\n    return (\n\n        <div className=\"container\">\n            {currentUser?\n            <div className=\"row justify-content-center\">\n                {currentUserJobs.length > 0?\n                    <div className=\"col-10\">\n                        <div className=\"row border-bottom border-dark\">\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Job title</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Company</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Location</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Published on</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Expires on</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Status</p></div>\n                        </div>\n                        <UserJobsPage currentUser={currentUser} currentUserJobs={currentUserJobs}></UserJobsPage>\n                    </div>\n            :\n                    <NoJobsPage></NoJobsPage> }\n            </div> :\n            <NotSignedInJobsPage logIn={logIn}></NotSignedInJobsPage> }\n        </div>\n    );\n};\n\n\n\nconst UserJobsPage = ({currentUserJobs}) => {\n\n    const listOfUserJobs = currentUserJobs.map((job) => {\n        return  <div className='row flex mt-3 border-bottom border-dark' key={job.id}>\n                    <div className=\"col-2\">\n                        <Link\n                            to={{\n                            pathname: `/jobs/${job.id}`\n                            }}\n                            state={{ job }} >\n                            <p>{job.title}</p>\n                        </Link>\n                    </div>\n                    <div className=\"col-2\"><p>{job.company}</p></div>\n                    <div className=\"col-2\">{job.remote? <p>Remote</p> : <p>{job.location}</p>}</div>\n                    <div className=\"col-2\"><p>{job.published_on}</p></div>\n                    <div className=\"col-2\">\n                        { new Date(job.expiry_date).getTime() > 0 ?\n                        <p>{job.expiry_date}</p>\n                        : <p>Invalid Date</p> }\n                    </div>\n                    <div className=\"col-2\">\n                        { new Date(job.expiry_date.seconds * 1000) < new Date()? <Badge bg=\"secondary\">Expired</Badge> : job.approved ? <Badge bg=\"success\">Live</Badge> : <Badge bg=\"primary\">Awaiting Approval</Badge>}\n                    </div>\n                </div>\n    });\n\n    return (\n        <div className=\"col\">\n            {listOfUserJobs}\n            <div className=\"row my-4\">\n                <div className=\"col\">\n                    <Link to={{pathname: ROUTES.SUBMIT_JOB}}>\n                        <Button className='button fw-bold' variant=\"primary\">Post a new job</Button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nconst NoJobsPage = () => {\n    return (\n        <div className=\"col-10\">\n            <div className=\"row mb-4\">\n                <div className=\"col\">\n                    <h2>Reach out to our community of 9833 junior developers</h2>\n                    <p>Our aim is to be the one stop shop for junior developer roles. All jobs featured on our job board must fall under the following three categories; paid internships, apprenticeships or junior developer roles. Additionally, jobs must not require previous experience or a degree and must be paid positions. Each job that is submitted will be approved by the codebar team before appearing on the job board.</p>\n                    <div className=\"job-post-costs-section\">\n                        <p>For a flat fee of £50 your post will be:</p>\n                        <ul>\n                            <li>Shown on the job board for 30 days</li>\n                            <li>Promoted to our Slack community of 5500 members</li>\n                            <li>Promoted to our 8600 Twitter followers</li>\n                        </ul>\n                    </div>\n                    <Link to={{\n                        pathname: ROUTES.SUBMIT_JOB\n                    }}\n                    ><Button className='button fw-bold' variant=\"primary\">Post a job</Button></Link>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-4 mb-4\">\n                    <Toast>\n                        <Toast.Body>\n                            <p>Within 2 days of posting an ad on the codebar job board, we had dozens of high quality applications and we made an offer to a candidate within 2 weeks. There are a lot of talented interns and junior developers; posting on the codebar job board is a great way to reach them.</p>\n                            <p>Bruno Girin, CTO, Imby</p>\n                        </Toast.Body>\n                    </Toast>\n                </div>\n                <div className=\"col-12 col-md-4 mb-4\">\n                    <Toast>\n                        <Toast.Body>\n                            <p>The codebar job board has been amazing. It’s been our best performing job board, and the quality of the applications was awesome. 100% the best £50 we have ever spent.</p>\n                            <p>Thomas Ankcorn, NearSt</p>\n                        </Toast.Body>\n                    </Toast>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst NotSignedInJobsPage = ({logIn}) => {\n    return (\n        <div>\n            <h3>You need to log in to view your jobs</h3>\n            <SignIn logIn={logIn}></SignIn>\n        </div>\n    );\n};\n\nexport default MyJobsPage;\n","import { Form, Button } from 'react-bootstrap';\nimport { useState } from 'react';\n\nconst BeforePostCheckList = () => {\n\n    const [checkOne, setCheckOne] = useState(false);\n    const [checkTwo, setCheckTwo] = useState(false);\n    const [checkThree, setCheckThree] = useState(false);\n    const [checkFour, setCheckFour] = useState(false);\n    const [checkFive, setCheckFive] = useState(false);\n    const [checkSix, setCheckSix] = useState(false);\n    const [checkSeven, setCheckSeven] = useState(false);\n\n\n\n    return (\n        <div className=\"before-post-checklist-box card\">\n            <div className=\"card-header\">\n                <p className='fw-bold m-0'>Before posting make sure that:</p>\n            </div>\n            <div className=\"card-body\">\n                <Form.Group className=\"mb-3\">\n                    <Form.Check type='checkbox' label=\"The position is suitable for people looking for internships, apprenticeships or junior roles that will enable them to build up their career\"\n                    defaultChecked = {checkOne} onChange={() => {setCheckOne(!checkOne)}}></Form.Check>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                    <Form.Check type='checkbox' label=\"There is no degree requirement\"\n                    defaultChecked = {checkTwo} onChange={() => {setCheckTwo(!checkTwo)}}></Form.Check>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                    <Form.Check type='checkbox' label=\"There is no previous experience requirement\"\n                    defaultChecked = {checkThree} onChange={() => {setCheckThree(!checkThree)}}></Form.Check>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                    <Form.Check type='checkbox' label=\"The job description details the work that will have to be undertaken\"\n                    defaultChecked = {checkFour} onChange={() => {setCheckFour(!checkFour)}}></Form.Check>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                    <Form.Check type='checkbox' label=\"The job description is short and to the point\"\n                    defaultChecked = {checkFive} onChange={() => {setCheckFive(!checkFive)}}></Form.Check>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                    <Form.Check type='checkbox' label=\"The job pays an appropriate salary\"\n                    defaultChecked = {checkSix} onChange={() => {setCheckSix(!checkSix)}}></Form.Check>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\">\n                    <Form.Check type='checkbox' label=\"You have made the required payment of £50\"\n                    defaultChecked = {checkSeven} onChange={() => {setCheckSeven(!checkSeven)}}></Form.Check>\n                </Form.Group>\n\n                <Button variant='info' className='button fw-bold'><a className=\"text-dark text-decoration-none\" href=\"https://buy.stripe.com/fZe5kAeDA5lY6ti5kk\">Pay here</a></Button>\n                <p>For an additional <b>£200</b> you can have your job listing featured in our newsletter and made available to an audience of over 10000 students and coaches. To find out more and when our next newsletter is being sent, send us an email at <a href='hello@codebar.io'>hello@codebar.io</a>.</p>\n            </div>\n\n        </div>\n    );\n};\n\nexport default BeforePostCheckList;\n","import { Form } from 'react-bootstrap';\n\nconst JobForm = ({\n    setFormJobTitle,\n    setFormJobDescription,\n    setFormJobSalary,\n    setFormJobRemote,\n    setFormJobContactName,\n    setFormJobContactEmail,\n    setFormJobPostLink,\n    setFormJobClosingDate,\n    setFormJobCompanyName,\n    setFormJobCompanyLocation,\n    setFormJobCompanyWebsite,\n    setFormJobCompanyAddress,\n    setFormJobCompanyPostcode,\n    formJobRemote\n}) => {\n\n    \n\n    return (\n        <div className=\"border rounded p-4\">\n            <section className='job-details-section'>\n                <h3>Job post details</h3>\n                <Form.Group className=\"mb-3\" controlId=\"job-title\">\n                    <Form.Label>Title</Form.Label>\n                    <Form.Control type=\"text\" required placeholder=\"e.g. Internship\" onChange={(evt) => {setFormJobTitle(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a job title\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group className=\"mb-3\" controlId=\"job-description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control as='textarea' rows={10} required placeholder='Use text or markdown for the job description' onChange={(evt) => {setFormJobDescription(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a job description\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"job-salary\">\n                    <Form.Label>Salary</Form.Label>\n                    <Form.Control type='text' required onChange={(evt) => {setFormJobSalary(evt.target.value)}}></Form.Control>\n                    <Form.Text>\n                        Annual pay before tax, with no commas or decimal points\n                    </Form.Text>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a job salary\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"job-remote\">\n                    <Form.Check type='checkbox' label=\"Remote\" defaultChecked = {formJobRemote} onChange={() => {setFormJobRemote(!formJobRemote)}}></Form.Check>\n                    <Form.Text>\n                        Only check if the role is fully remote only\n                    </Form.Text>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"job-contact-name\">\n                    <Form.Label>Contact name</Form.Label>\n                    <Form.Control type='text' required onChange={(evt) => {setFormJobContactName(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a contact name\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"job-contact-email\">\n                    <Form.Label>Contact email</Form.Label>\n                    <Form.Control type='text' required onChange={(evt) => {setFormJobContactEmail(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a contact email\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n\n                <Form.Group className=\"mb-3\" controlId=\"job-post-link\">\n                    <Form.Label>Link to job post</Form.Label>\n                    <Form.Control type='text' required onChange={(evt) => {setFormJobPostLink(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a link to the job application\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"job-closing-date\">\n                    <Form.Label>Closing date</Form.Label>\n                    <Form.Control type='date' required onChange={(evt) => {setFormJobClosingDate(evt.target.value)}}></Form.Control>\n                    \n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a closing date for the job advert\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n            </section>\n            <section className='company-details-section'>\n                <h3>Company details</h3>\n                <Form.Group className=\"mb-3\" controlId=\"company-name\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" required placeholder=\"e.g. codebar\" onChange={(evt) => {setFormJobCompanyName(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide the company name\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"company-website\">\n                    <Form.Label>Website</Form.Label>\n                    <Form.Control type=\"text\" required placeholder=\"e.g. https://www.codebar.io\" onChange={(evt) => {setFormJobCompanyWebsite(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a URL to the company website\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"company-location\">\n                    <Form.Label>Location</Form.Label>\n                    <Form.Control type=\"text\" required placeholder=\"e.g. London or Berlin\" onChange={(evt) => {setFormJobCompanyLocation(evt.target.value)}}></Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide the location of the company\n                    </Form.Control.Feedback>\n                </Form.Group>\n            </section>\n            <section className=\"google-search-section\">\n                <p>The information below is only required if you want this job post to be shared with Google Search UK</p>\n                <Form.Group className=\"mb-3\" controlId=\"company-address\">\n                    <Form.Label>Address</Form.Label>\n                    <Form.Control type=\"text\" onChange={(evt) => {setFormJobCompanyAddress(evt.target.value)}}></Form.Control>\n                </Form.Group>\n                <Form.Group className=\"mb-3\" controlId=\"company-postcode\">\n                    <Form.Label>Postcode</Form.Label>\n                    <Form.Control type=\"text\" onChange={(evt) => {setFormJobCompanyPostcode(evt.target.value)}}></Form.Control>\n                </Form.Group>\n            </section>\n        </div>\n    );\n};\n\nexport default JobForm;","import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport BeforePostCheckList from \"../BeforePostChecklist/index.js\";\nimport SignIn from \"../SignIn/index.js\";\nimport JobForm from \"../JobForm/JobForm.js\";\nimport { Form, Button } from 'react-bootstrap';\nimport { useLocation, useNavigate } from \"react-router\";\nimport * as ROUTES from '../../constants/routes.js';\n\n\nconst SumbitJobPage = ({createJobPost, currentUser, logIn}) => {\n    const [validated, setValidated] = useState(false);\n\n    const [formJobTitle, setFormJobTitle] = useState(\"\");\n    const [formJobDescription, setFormJobDescription] = useState(\"\");\n    const [formJobSalary, setFormJobSalary] = useState(\"\");\n    const [formJobRemote, setFormJobRemote] = useState(false);\n    const [formJobContactName, setFormJobContactName] = useState(\"\");\n    const [formJobContactEmail, setFormJobContactEmail] = useState(\"\");\n    const [formJobPostLink, setFormJobPostLink] = useState(\"\");\n    const [formJobClosingDate, setFormJobClosingDate] = useState(\"\");\n    const [formJobCompanyName, setFormJobCompanyName] = useState(\"\");\n    const [formJobCompanyLocation, setFormJobCompanyLocation] = useState(\"\");\n    const [formJobCompanyWebsite, setFormJobCompanyWebsite] = useState(\"\");\n    const [formJobCompanyAddress, setFormJobCompanyAddress] = useState(\"\");\n    const [formJobCompanyPostcode, setFormJobCompanyPostcode] = useState(\"\");\n\n    const data = useLocation();\n    const navigate = useNavigate();\n\n\n\n    const getJobDataFromPreview = () => {\n        if (data.state) {\n            const jobTitle = document.getElementById('job-title');\n            jobTitle.value = data.state.previewJob.title;\n            setFormJobTitle(data.state.previewJob.title);\n\n            const jobDescription = document.getElementById('job-description');\n            jobDescription.value = data.state.previewJob.description;\n            setFormJobDescription(data.state.previewJob.description);\n\n            const jobSalary = document.getElementById('job-salary');\n            jobSalary.value = data.state.previewJob.salary;\n            setFormJobSalary(data.state.previewJob.salary);\n\n            const jobRemoteCheck = document.getElementById('job-remote');\n            if (data.state.previewJob.remote === true) {\n                setFormJobRemote(true);\n                jobRemoteCheck.checked = 'true'};\n\n            const jobContactName = document.getElementById('job-contact-name');\n            jobContactName.value = data.state.previewJob.contact_name;\n            setFormJobContactName(data.state.previewJob.contact_name);\n\n            const jobContactEmail = document.getElementById('job-contact-email');\n            jobContactEmail.value = data.state.previewJob.email;\n            setFormJobContactEmail(data.state.previewJob.email);\n\n            const jobPostLink = document.getElementById('job-post-link');\n            jobPostLink.value = data.state.previewJob.link_to_job;\n            setFormJobPostLink(data.state.previewJob.link_to_job);\n\n            const jobClosingDate = document.getElementById('job-closing-date');\n            jobClosingDate.value = data.state.previewJob.expiry_date;\n            setFormJobClosingDate(data.state.previewJob.expiry_date);\n\n            const jobCompanyName = document.getElementById('company-name');\n            jobCompanyName.value = data.state.previewJob.company;\n            setFormJobCompanyName(data.state.previewJob.company);\n\n            const jobCompanyWebsite = document.getElementById('company-website');\n            jobCompanyWebsite.value = data.state.previewJob.company_website;\n            setFormJobCompanyWebsite(data.state.previewJob.company_website);\n\n            const jobCompanyLocation = document.getElementById('company-location');\n            jobCompanyLocation.value = data.state.previewJob.location;\n            setFormJobCompanyLocation(data.state.previewJob.location);\n\n            const jobCompanyAddress = document.getElementById('company-address');\n            jobCompanyAddress.value = data.state.previewJob.company_address;\n            setFormJobCompanyAddress(data.state.previewJob.company_address);\n\n            const jobCompanyPostcode = document.getElementById('company-postcode');\n            jobCompanyPostcode.value = data.state.previewJob.company_postcode;\n            setFormJobCompanyPostcode(data.state.previewJob.company_postcode);\n\n\n        };\n    };\n\n    useEffect(() => {\n        getJobDataFromPreview();\n    }, []);\n\n    const handleJobPostSubmitForm = (evt) => {\n        const form = evt.currentTarget;\n        if (form.checkValidity() === false) {\n            evt.preventDefault();\n            evt.stopPropagation();\n            setValidated(true);\n            return;\n        }\n\n        setValidated(true);\n        evt.preventDefault();\n\n\n\n        createJobPost(\n\n            formJobTitle,\n            formJobDescription,\n            formJobSalary,\n            formJobRemote,\n            formJobContactName,\n            formJobContactEmail,\n            formJobPostLink,\n            formJobClosingDate,\n            formJobCompanyName,\n            formJobCompanyLocation,\n            formJobCompanyWebsite,\n            formJobCompanyAddress,\n            formJobCompanyPostcode\n            );\n        navigate(ROUTES.MY_JOBS);\n    };\n\n    const previewJob = {\n        expiry_date: formJobClosingDate,\n        company_address: formJobCompanyAddress,\n        location: formJobCompanyLocation,\n        company: formJobCompanyName,\n        company_postcode: formJobCompanyPostcode,\n        company_website: formJobCompanyWebsite,\n        email: formJobContactEmail,\n        contact_name: formJobContactName,\n        creator_by_id: \"\",\n        description: formJobDescription,\n        link_to_job: formJobPostLink,\n        title: formJobTitle,\n        published_on: \"\",\n        remote: formJobRemote,\n        salary: formJobSalary\n    };\n\n\n\n    return (\n        <div className=\"container\">\n            {currentUser?\n                <div>\n                    <h2>List a new job</h2>\n                    <p className=\"alert alert-primary fw-bold\">You will need to make the payment of £50 before the job can be approved. <a href=\"https://buy.stripe.com/fZe5kAeDA5lY6ti5kk\">Pay here</a>.</p>\n                    <hr />\n                    <div className=\"row mt-4\">\n                        <div className=\"col-md-6 col-sm-12 order-md-last\">\n                            <BeforePostCheckList></BeforePostCheckList>\n                        </div>\n                        <div className=\"container col-md-6 col-sm-12\">\n                            <Form noValidate validated={validated} className='job-post-form' onSubmit={(evt) => {handleJobPostSubmitForm(evt)}}>\n                            <JobForm\n                                    setFormJobTitle={setFormJobTitle}\n                                    setFormJobDescription={setFormJobDescription}\n                                    setFormJobSalary={setFormJobSalary}\n                                    setFormJobRemote={setFormJobRemote}\n                                    setFormJobContactName={setFormJobContactName}\n                                    setFormJobContactEmail={setFormJobContactEmail}\n                                    setFormJobPostLink={setFormJobPostLink}\n                                    setFormJobClosingDate={setFormJobClosingDate}\n                                    setFormJobCompanyName={setFormJobCompanyName}\n                                    setFormJobCompanyLocation={setFormJobCompanyLocation}\n                                    setFormJobCompanyWebsite={setFormJobCompanyWebsite}\n                                    setFormJobCompanyAddress={setFormJobCompanyAddress}\n                                    setFormJobCompanyPostcode={setFormJobCompanyPostcode}\n                                    formJobRemote={formJobRemote}\n                                ></JobForm>\n                                <div className=\"my-4\">\n                                    <Link\n                                        to={{\n                                            pathname: '/my/jobs/new/preview'\n                                            }}\n                                            state={{ previewJob }}\n                                    >\n                                                <Button className='button fw-bold' variant=\"secondary\">Preview this job post</Button>\n                                    </Link>\n\n                                        <Button className='button fw-bold' variant=\"primary\" type=\"submit\">Submit job for approval</Button>\n\n                                </div>\n                            </Form>\n                        </div>\n\n                    </div>\n                </div>\n                :\n                <div>\n                    <h3>You need to log in to post a job</h3>\n                    <SignIn logIn={logIn}></SignIn>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default SumbitJobPage;\n","import FullJob from \"../FullJob\";\nimport { useLocation } from \"react-router\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport * as ROUTES from '../../constants/routes.js';\n\n\nconst JobPreview = () => {\n\n    const data = useLocation();\n    const previewJob = data.state.previewJob;\n    \n\n    return (\n       <div className=\"container\">\n           <h2>Preview of Job Post</h2>\n          \n           <Link\n                to={{\n                    pathname: ROUTES.SUBMIT_JOB\n                    }}\n                    state={{ previewJob }}\n            >\n            <Button>Back to job form</Button></Link>\n            <hr />\n           <FullJob job={previewJob}></FullJob>\n       </div>\n    );\n};\n\nexport default JobPreview;","import { useLocation, useNavigate } from \"react-router\";\nimport { Form, Button } from 'react-bootstrap';\nimport { useState, useEffect } from \"react\";\nimport SignIn from \"../SignIn\";\nimport JobForm from \"../JobForm/JobForm\";\nimport BeforePostCheckList from \"../BeforePostChecklist\";\nimport * as ROUTES from '../../constants/routes.js';\n\nconst EditJob = ({updateJobPost, currentUser, isAdmin}) => {\n\n    const data = useLocation();\n    const job = data.state.job;\n    const navigate = useNavigate();\n    \n\n    const [validated, setValidated] = useState(false);\n\n    const [formJobTitle, setFormJobTitle] = useState(\"\");\n    const [formJobDescription, setFormJobDescription] = useState(\"\");\n    const [formJobSalary, setFormJobSalary] = useState(\"\");\n    const [formJobRemote, setFormJobRemote] = useState(false);\n    const [formJobContactName, setFormJobContactName] = useState(\"\");\n    const [formJobContactEmail, setFormJobContactEmail] = useState(\"\");\n    const [formJobPostLink, setFormJobPostLink] = useState(\"\");\n    const [formJobClosingDate, setFormJobClosingDate] = useState(\"\");\n    const [formJobCompanyName, setFormJobCompanyName] = useState(\"\");\n    const [formJobCompanyLocation, setFormJobCompanyLocation] = useState(\"\");\n    const [formJobCompanyWebsite, setFormJobCompanyWebsite] = useState(\"\");\n    const [formJobCompanyAddress, setFormJobCompanyAddress] = useState(\"\");\n    const [formJobCompanyPostcode, setFormJobCompanyPostcode] = useState(\"\");\n\n\n\n    const getJobDataToEdit = () => {\n        if (data.state?.job) {\n            const jobTitle = document.getElementById('job-title');\n            jobTitle.value = job.title;\n            setFormJobTitle(job.title);\n\n            const jobDescription = document.getElementById('job-description');\n            jobDescription.value = job.description;\n            setFormJobDescription(job.description);\n\n            const jobSalary = document.getElementById('job-salary');\n            jobSalary.value = job.salary;\n            setFormJobSalary(job.salary);\n\n            const jobRemoteCheck = document.getElementById('job-remote');\n            if (job.remote === true) {\n                setFormJobRemote(true);\n                jobRemoteCheck.checked = 'true'};\n\n            const jobContactName = document.getElementById('job-contact-name');\n            jobContactName.value = job.contact_name;\n            setFormJobContactName(job.contact_name);\n\n            const jobContactEmail = document.getElementById('job-contact-email');\n            jobContactEmail.value = job.email;\n            setFormJobContactEmail(job.email);\n\n            const jobPostLink = document.getElementById('job-post-link');\n            jobPostLink.value = job.link_to_job;\n            setFormJobPostLink(job.link_to_job);\n\n            const jobClosingDate = document.getElementById('job-closing-date');\n            const formFormatDate = new Date(job.expiry_date).toLocaleDateString().split(\"/\").reverse().join(\"-\");\n            jobClosingDate.value = formFormatDate;\n            setFormJobClosingDate(job.expiry_date);\n\n            const jobCompanyName = document.getElementById('company-name');\n            jobCompanyName.value = job.company;\n            setFormJobCompanyName(job.company);\n\n            const jobCompanyWebsite = document.getElementById('company-website');\n            jobCompanyWebsite.value = job.company_website;\n            setFormJobCompanyWebsite(job.company_website);\n\n            const jobCompanyLocation = document.getElementById('company-location');\n            jobCompanyLocation.value = job.location;\n            setFormJobCompanyLocation(job.location);\n\n            const jobCompanyAddress = document.getElementById('company-address');\n            jobCompanyAddress.value = job.company_address;\n            setFormJobCompanyAddress(job.company_address);\n\n            const jobCompanyPostcode = document.getElementById('company-postcode');\n            jobCompanyPostcode.value = job.company_postcode;\n            setFormJobCompanyPostcode(job.company_postcode);\n\n        };\n    };\n\n    useEffect(() => {\n        \n        getJobDataToEdit();\n    }, []);\n\n    const handleJobPostSubmitForm = (evt) => {\n        const form = evt.currentTarget;\n        if (form.checkValidity() === false) {\n            evt.preventDefault();\n            evt.stopPropagation();\n            setValidated(true);\n            return;\n        }\n\n        setValidated(true);\n        evt.preventDefault();\n\n        \n        updateJobPost(\n            job.id,\n            formJobTitle,\n            formJobDescription,\n            formJobSalary,\n            formJobRemote,\n            formJobContactName,\n            formJobContactEmail,\n            formJobPostLink,\n            formJobClosingDate,\n            formJobCompanyName,\n            formJobCompanyLocation,\n            formJobCompanyWebsite,\n            formJobCompanyAddress,\n            formJobCompanyPostcode\n            );\n\n        if (isAdmin) {\n            navigate(ROUTES.ADMIN_LIST_JOBS);\n        } else {\n            navigate(ROUTES.MY_JOBS);\n        };\n    };\n\n   \n\n\n\n    return (\n        <div className=\"container\">\n            {currentUser?\n                <div>\n                    <h2>Edit your job</h2>\n                    <p class=\"alert alert-primary fw-bold\">You will need to make the payment of £50 before the job can be approved. <a href=\"https://buy.stripe.com/fZe5kAeDA5lY6ti5kk\">Pay here</a>.</p>\n                    <hr />\n                    <div className=\"row mt-4\">\n                        <div className=\"col-md-6 col-sm-12 order-md-last\">\n                            <BeforePostCheckList></BeforePostCheckList>\n                        </div>\n                        <div className=\"container col-md-6 col-sm-12\">\n                            <Form noValidate validated={validated} className='job-post-form' onSubmit={(evt) => {handleJobPostSubmitForm(evt)}}>\n                                \n                                <JobForm\n                                    setFormJobTitle={setFormJobTitle} \n                                    setFormJobDescription={setFormJobDescription} \n                                    setFormJobSalary={setFormJobSalary} \n                                    setFormJobRemote={setFormJobRemote} \n                                    setFormJobContactName={setFormJobContactName} \n                                    setFormJobContactEmail={setFormJobContactEmail} \n                                    setFormJobPostLink={setFormJobPostLink} \n                                    setFormJobClosingDate={setFormJobClosingDate} \n                                    setFormJobCompanyName={setFormJobCompanyName} \n                                    setFormJobCompanyLocation={setFormJobCompanyLocation} \n                                    setFormJobCompanyWebsite={setFormJobCompanyWebsite} \n                                    setFormJobCompanyAddress={setFormJobCompanyAddress} \n                                    setFormJobCompanyPostcode={setFormJobCompanyPostcode} \n                                    formJobRemote={formJobRemote}\n                                ></JobForm>\n\n                                <div className=\"my-4\">\n                                    \n                                    { isAdmin? \n                                    \n                                        <Button className='button bold' variant=\"primary\" type=\"submit\">Save edits</Button>\n                                     : \n                                    \n                                        <Button className='button bold' variant=\"primary\" type=\"submit\">Re-submit job for approval</Button>\n                                    \n                                    }\n                                </div>\n                            </Form>\n                        </div>\n\n                    </div>\n                </div>\n                :\n                <div>\n                    <h3>You need to log in to edit a job</h3>\n                    <SignIn></SignIn>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default EditJob;","import { Form, Button, FormGroup, Alert } from 'react-bootstrap';\nimport { useState } from 'react';\n\nconst MakeRemoveAdmin = ({makeNewAdmin, removeAdmin, isAdmin}) => {\n\n    const [makeAdminErrorMessage, setMakeAdminErrorMessage] = useState(\"\");\n    const [makeAdminSuccessMessage, setMakeAdminSuccessMessage] = useState(\"\");\n\n    const [removeAdminErrorMessage, setRemoveAdminErrorMessage] = useState(\"\");\n    const [removeAdminSuccessMessage, setRemoveAdminSuccessMessage] = useState(\"\");\n\n    const handleNewAdminFormSubmit = async (evt) => {\n        evt.preventDefault();\n        const adminEmail = document.querySelector('#new-admin-email').value;\n        try {\n            await makeNewAdmin(adminEmail);\n            setMakeAdminSuccessMessage(`${adminEmail} has successfully been made an admin`)\n        } catch (error) {\n            console.log(error.message);\n            setMakeAdminErrorMessage(error.message);\n        }\n    };\n\n    const handleRemoveAdminSubmit = async (evt) => {\n        evt.preventDefault();\n        const adminEmail = document.querySelector('#remove-admin-email').value;\n        try {\n            await removeAdmin(adminEmail);\n            setRemoveAdminSuccessMessage(`${adminEmail} has successfully been removed from the admin list`)\n        } catch (error) {\n            setRemoveAdminErrorMessage(error.message);\n        }\n    };\n\n    return (\n        <div>\n            { isAdmin? <div className='container'>\n            \n                <h3>Add a new admin</h3>\n                <p>To make an existing user an admin by their email address</p>\n                <Form onSubmit={handleNewAdminFormSubmit} className=\"col-6\">\n                    <FormGroup controlId='new-admin-email'>\n                        <Form.Control type='email' placeholder='user email' ></Form.Control>\n                    </FormGroup>\n                    <Button className='button' type='submit'>Make an admin</Button>\n                </Form>\n                { makeAdminErrorMessage? <Alert variant='danger'>Error updating admin rights. {makeAdminErrorMessage}</Alert>: null}\n                { makeAdminSuccessMessage? <Alert variant='success'>{makeAdminSuccessMessage}</Alert>: null}\n            \n                <hr></hr>\n                <h3>Remove an admin</h3>\n                <p>To remove an admin by their email address</p>\n                <Form onSubmit={handleRemoveAdminSubmit} className=\"col-6\">\n                    <FormGroup controlId='remove-admin-email'>\n                        <Form.Control type='email' placeholder='user email' ></Form.Control>\n                    </FormGroup>\n                    <Button className='button' type='submit'>Remove admin</Button>\n                </Form>\n                { removeAdminErrorMessage? <Alert variant='danger'>Error updating admin rights. {removeAdminErrorMessage}</Alert>: null}\n                { removeAdminSuccessMessage? <Alert variant='success'>{removeAdminSuccessMessage}</Alert>: null}\n            \n            </div> : \n            <div className='container'>\n                <h3>You need to be logged in as an admin to access this page</h3>\n            </div>\n            }\n        </div>\n    );\n};\n\nexport default MakeRemoveAdmin;","\nimport { Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nconst AdminOnlyJobs = ({jobs, isAdmin}) => {\n\n    const [listJobs, setListJobs] = useState([]);\n\n    useEffect(() => {\n\n        const listJobs = jobs.sort(job => job.approved ? 1 : -1);\n        setListJobs(listJobs);\n\n    }, [jobs]);\n\n    const listOfJobs = listJobs.map((job) => {\n\n        const expiryDate = new Date(job.expiry_date).toLocaleDateString();\n\n        return <div key={job.id}>\n            <div className='row mt-3 border-bottom border-dark' key={job.id}>\n                <div className=\"col-3\">\n                    <Link\n                        to={{\n                        pathname: `/jobs/${job.id}`\n                        }}\n                        state={{ job }} >\n                        <p>{job.title}</p>\n                    </Link>\n                </div>\n                <div className=\"col-2\"><p>{job.company}</p></div>\n                <div className=\"col-2\">{job.remote? <p>Remote</p> : <p>{job.location}</p>}</div>\n                <div className=\"col-2\"><p>{expiryDate}</p></div>\n\n                <div className=\"col-2\">\n                    {\n                        new Date(job.expiry_date) > new Date() && job.approved ? <Badge bg=\"success\">Live</Badge>\n                        : new Date(job.expiry_date) > new Date() && !job.approved ? <Badge bg=\"warning\">Awaiting Approval</Badge>\n                        : new Date(job.expiry_date) > new Date() ? <Badge bg=\"secondary\">Expired</Badge>\n                        : <Badge bg=\"secondary\">Expired</Badge>\n                    }\n                </div>\n                <div className=\"col-1\">\n                    <Link to={{\n                        pathname: `/jobs/${job.id}`}}\n                        state={{ job }}>\n                            Review\n                    </Link>\n                </div>\n\n            </div>\n        </div>\n    });\n\n    return (\n\n        <div>\n            { isAdmin? <div className='container mb-4'>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className=\"row border-bottom border-dark\">\n                            <div className=\"col-3\"><p className=\"fs-5 fw-bold mb-2\">Job title</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Company</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Location</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Closing date</p></div>\n                            <div className=\"col-2\"><p className=\"fs-5 fw-bold mb-2\">Status</p></div>\n                            <div className=\"col-1\"></div>\n                        </div>\n                    </div>\n                    <div className=\"col-12\">\n                        {listOfJobs}\n                    </div>\n                </div>\n            </div> :\n            <div className='container'>\n                <h3>You need to be logged in as an admin to access this page</h3>\n            </div>\n            }\n        </div>\n    );\n};\n\nexport default AdminOnlyJobs;\n","import { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap';\nimport { useState } from 'react';\nimport * as ROUTES from '../../constants/routes.js';\nimport { Link } from 'react-router-dom';\n\nconst ForgotPassword = ({resetPasswordEmail}) => {\n    const [signInEmail, setSignInEmail] = useState(\"\");\n    const [successMessage, setSuccessMessage] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n\n    const handleLogInButtonClick = async (evt) => {\n        evt.preventDefault();\n        try {\n            await resetPasswordEmail(signInEmail);\n            setSuccessMessage(\"A reset link has been sent to your inbox\");\n        } catch (error) {\n            console.log(error.message);\n            if (error.message === 'FirebaseError: Firebase: Error (auth/invalid-email).') {\n                setErrorMessage('Invalid email address');\n            } else if (error.message === 'FirebaseError: Firebase: Error (auth/user-not-found).') {\n                setErrorMessage('We couldn\\'t find that email address in our system.  Sign up to register.');\n            } else {\n                setErrorMessage('Error sending link');\n            };\n        };\n    };\n\n    const validateForm = () => {\n        return signInEmail.length > 0;\n    }\n\n\n    return (\n        <Container>\n            <Row>\n                <Col md={{ span: 6, offset: 3 }}>\n                    <p>We'll send a password reset link to your email</p>\n                    <Form>\n                        <Form.Group size=\"lg\" controlId=\"email\" className=\"sign-in-up-input\">\n                            <Form.Label>Email</Form.Label>\n                                <Form.Control\n                                    autoFocus\n                                    type=\"email\"\n                                    value={signInEmail}\n                                    onChange={(evt) => setSignInEmail(evt.target.value)}\n                                />\n                        </Form.Group>\n\n\n                        <Button onClick={(evt) => handleLogInButtonClick(evt)} className='button fw-bold' type=\"submit\" disabled={!validateForm()}>\n                            Reset password\n                        </Button>\n\n                        <a href={ROUTES.SIGN_IN}>\n                            Go to login page\n                        </a>\n                    </Form>\n                    { successMessage? <Alert variant='success'>{successMessage}</Alert> : \n                        errorMessage? <Alert variant='danger'>{errorMessage}</Alert> : null\n                    }\n                    <hr />\n                    <div>\n                        <p>Don't have an account?</p>\n                        <Link to={{pathname: ROUTES.SIGN_UP}}><Button className='button bold' variant=\"info\">Sign up</Button></Link>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nexport default ForgotPassword;\n","import { Routes, Route, useNavigate } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport { collection, getDocs, addDoc, updateDoc, doc } from 'firebase/firestore'\nimport { getFunctions, httpsCallable } from 'firebase/functions';\nimport { db, auth } from '../Firebase/firebase-config.js'\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, onAuthStateChanged, signOut, sendSignInLinkToEmail } from 'firebase/auth';\nimport '../App/App.css';\n\nimport LandingPage from '../Landing';\nimport Footer from '../Footer';\nimport JobPage from '../JobPage/index.js';\nimport SignIn from '../SignIn/index.js';\nimport SignUp from '../SignUp/index.js';\nimport { NavigationBarJobBoardLoggedIn, NavigationBarJobBoardNonLoggedIn } from '../Navigation/index.js';\nimport MyJobsPage from '../MyJobs/index.js';\nimport SumbitJobPage from '../SubmitJob/index.js';\nimport JobPreview from '../JobPreview/index.js';\nimport EditJob from '../EditJob/index.js';\nimport MakeRemoveAdmin from '../MakeRemoveAdmin/index.js';\nimport AdminOnlyJobs from '../AdminOnly/index.js';\nimport ForgotPassword from '../ForgotPassword/index.js';\n\nimport * as ROUTES from '../../constants/routes';\n\n\nconst App = () => {\n\n    const [jobs, setJobs] = useState([]);\n    const [currentUser, setCurrentUser] = useState({});\n    const [isAdmin, setIsAdmin] = useState(false);\n\n    const jobsCollectionRef = collection(db, \"jobs\");\n    const mailCollectionRef = collection(db, \"mail\");\n    const userDetailsCollectionRef = collection(db, \"user_details\");\n\n\n    const navigate = useNavigate();\n    const functions = getFunctions();\n\n    const actionCodeSettings = {\n      url: 'http://localhost:3000/',\n      handleCodeInApp: true,\n    };\n\n    useEffect (() => {\n\n        const getJobs = async () => {\n          const jobsData = await getDocs(jobsCollectionRef);\n          setJobs(jobsData.docs.map((doc) => ({...doc.data(), id: doc.id})));\n\n\n        };\n\n        getJobs();\n\n\n      }, [jobsCollectionRef]);\n\n      onAuthStateChanged(auth, (currentUser) => {\n        setCurrentUser(currentUser);\n        if (currentUser) {\n          currentUser.getIdTokenResult().then(idTokenResult => {\n            if (idTokenResult.claims?.admin) {\n              setIsAdmin(idTokenResult.claims.admin);\n            } else {\n              setIsAdmin(false);\n            };\n          });\n        };\n\n\n      });\n\n\n      const makeNewAdmin = async (adminEmail) => {\n        if (isAdmin) {\n          try {\n            const addAdminRole = httpsCallable(functions, 'addAdminRole');\n            const newAdmin = await addAdminRole( {email: adminEmail} );\n            console.log(newAdmin);\n            } catch (error) {\n              console.log(error);\n            };\n        } else {\n          throw new Error(\"Only admins can make changes\");\n        }\n\n      };\n\n      const removeAdmin = async (adminEmail) => {\n        if (isAdmin) {\n          try {\n          const removeAdminRole = httpsCallable(functions, 'removeAdminRole');\n          const removedAdmin = await removeAdminRole( {email: adminEmail} );\n          console.log(removedAdmin);\n          } catch (error) {\n            console.log(error);\n          };\n        } else {\n          throw new Error(\"Only admins can make changes\");\n        }\n      };\n\n\n      const register = async (registerEmail, registerPassword, registerName, userMarketingOptIn) => {\n\n          await createUserWithEmailAndPassword(\n            auth,\n            registerEmail,\n            registerPassword)\n              .then((res) => createUserDetails(res.user.uid, registerName, userMarketingOptIn));\n\n          navigate(ROUTES.LANDING);\n      };\n\n      const createUserDetails = async (userID, registerName, userMarketingOptIn) => {\n\n        try {\n          const userDetails = await addDoc(userDetailsCollectionRef, {\n            user_id: userID,\n            name: registerName,\n            marketing_opt_in: userMarketingOptIn,\n            date_registered: new Date(),\n          });\n          console.log(userDetails);\n\n        } catch (error) {\n          console.log(error);\n        };\n\n      };\n\n      const logIn = async (signInEmail, signInPassword) => {\n\n          const user = await signInWithEmailAndPassword(\n            auth,\n            signInEmail,\n            signInPassword)\n          console.log(user);\n          navigate(ROUTES.LANDING);\n      };\n\n      const sendLink = async (signInEmail) => {\n        await sendSignInLinkToEmail(auth, signInEmail, actionCodeSettings);\n        window.localStorage.setItem('emailForSignIn', signInEmail);\n      };\n\n      const logOut = async () => {\n        await signOut(auth);\n        navigate(ROUTES.LANDING);\n      };\n\n      const resetPasswordEmail = async (email) => {\n        try {\n          await sendPasswordResetEmail(auth, email);\n        } catch (error) {\n          throw Error(error);\n        };\n      };\n\n      const createJobPost = async (\n        formJobTitle,\n        formJobDescription,\n        formJobSalary,\n        formJobRemote,\n        formJobContactName,\n        formJobContactEmail,\n        formJobPostLink,\n        formJobClosingDate,\n        formJobCompanyName,\n        formJobCompanyLocation,\n        formJobCompanyWebsite,\n        formJobCompanyAddress,\n        formJobCompanyPostcode\n        ) => {\n\n          try {\n            const job = await addDoc(jobsCollectionRef, {\n              expiry_date: formJobClosingDate,\n              company_address: formJobCompanyAddress,\n              location: formJobCompanyLocation,\n              company: formJobCompanyName,\n              company_postcode: formJobCompanyPostcode,\n              company_website: formJobCompanyWebsite,\n              email: formJobContactEmail,\n              contact_name: formJobContactName,\n              created_at: new Date().toLocaleDateString(),\n              creator_by_id: currentUser.uid,\n              description: formJobDescription,\n              link_to_job: formJobPostLink,\n              title: formJobTitle,\n              published_on: \"\",\n              remote: formJobRemote,\n              salary: formJobSalary,\n              approved: false\n\n            });\n            console.log(job);\n            createEmail('jobs@codebar.io', {\n              subject: 'New job post',\n              text: `A new job '${formJobTitle}' at ${formJobCompanyName} has been submitted for approval`\n            });\n\n          } catch (error) {\n            console.log(error);\n          };\n\n      };\n\n      const updateJobPost = async (\n        id,\n        formJobTitle,\n        formJobDescription,\n        formJobSalary,\n        formJobRemote,\n        formJobContactName,\n        formJobContactEmail,\n        formJobPostLink,\n        formJobClosingDate,\n        formJobCompanyName,\n        formJobCompanyLocation,\n        formJobCompanyWebsite,\n        formJobCompanyAddress,\n        formJobCompanyPostcode\n      ) => {\n\n        try {\n          const jobToUpdate = doc(db, \"jobs\", id);\n          const newFields = {\n            expiry_date: formJobClosingDate,\n            company_address: formJobCompanyAddress,\n            location: formJobCompanyLocation,\n            company: formJobCompanyName,\n            company_postcode: formJobCompanyPostcode,\n            company_website: formJobCompanyWebsite,\n            email: formJobContactEmail,\n            contact_name: formJobContactName,\n            description: formJobDescription,\n            link_to_job: formJobPostLink,\n            title: formJobTitle,\n            published_on: \"\",\n            remote: formJobRemote,\n            salary: formJobSalary,\n            approved: false\n          };\n          await updateDoc(jobToUpdate, newFields);\n          console.log(jobToUpdate);\n        } catch (error) {\n          console.log(error.message);\n        };\n\n      };\n\n      const approveJob = async (job) => {\n        try {\n          const jobToApprove = doc(db, \"jobs\", job.id);\n          const todayDate = new Date().toLocaleDateString();\n          const newFields = {\n            approved: true,\n            published_on: todayDate,\n          };\n          await updateDoc(jobToApprove, newFields);\n\n          sendApprovedEmail(job);\n\n        } catch (error) {\n          console.log(error.message);\n        };\n      };\n\n      const unPublishJob = async (job) => {\n        try {\n          const jobToUnPublish = doc(db, \"jobs\", job.id);\n          const newFields = {\n            approved: false,\n            published_on: \"\",\n          };\n          await updateDoc(jobToUnPublish, newFields);\n\n        } catch (error) {\n          console.log(error.message);\n        };\n      };\n\n      const createEmail = async (to, message) => {\n\n        try {\n          const email = await addDoc(mailCollectionRef, {\n            to: to,\n            message: message,\n          });\n          console.log(email);\n\n        } catch (error) {\n          console.log(error);\n        };\n\n    };\n\n    const sendApprovedEmail = async (job) => {\n\n      const approveEmail =\n\n        `<html>\n            <body>\n                <h3>Hi ${job.contact_name}</h3>\n                <p>The <a href=${job.link_to_job}>${job.title}</a> at ${job.company} job you submitted has been approved.</p>\n                <p>It is now visible to all members at <a href='https://codebar.io/jobs'>our jobs section.</a></p>\n\n\n                <h4>Contact info</h4>\n                <p>Email: <strong><a href=\"mailto:jobs@codebar.io\">jobs@codebar.io</a></strong></p>\n\n            </body>\n        </html>`\n      try {\n        await createEmail(job.contact_email,\n          {\n            subject: 'Job post approved',\n            html: approveEmail,\n          }\n        );\n        console.log(\"Email sent\")\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n\n    return (\n\n          <div>\n            <header id='top'>\n              {currentUser?\n                <div>\n                  <NavigationBarJobBoardLoggedIn currentUser={currentUser} isAdmin={isAdmin} logOut={logOut} />\n                </div>\n              : <div>\n                <NavigationBarJobBoardNonLoggedIn />\n              </div> }\n            </header>\n\n          <div>\n            <Routes>\n\n                <Route exact path={ROUTES.LANDING} element={ <LandingPage currentUser={currentUser} jobs={jobs}/> } />\n                <Route exact path={ROUTES.JOB} element={ <JobPage currentUser={currentUser} isAdmin={isAdmin} approveJob={approveJob} unPublishJob={unPublishJob}></JobPage>}></Route>\n                <Route path={ROUTES.SIGN_UP} element={ <SignUp register={register}/> } />\n                <Route path={ROUTES.SIGN_IN} element={ <SignIn logIn={logIn} sendLink={sendLink}/> } />\n                <Route path={ROUTES.MY_JOBS} element={ <MyJobsPage logIn={logIn} jobs={jobs} currentUser={currentUser} />}></Route>\n                <Route path={ROUTES.SUBMIT_JOB} element = { <SumbitJobPage logIn={logIn} currentUser={currentUser} createJobPost={createJobPost}/>}></Route>\n                <Route path={ROUTES.PREVIEW_JOB} element ={ <JobPreview></JobPreview> }></Route>\n                <Route path={ROUTES.EDIT_JOB} element ={ <EditJob isAdmin={isAdmin} currentUser={currentUser} updateJobPost={updateJobPost}></EditJob> }></Route>\n                <Route path={ROUTES.MAKE_REMOVE_ADMIN} element = { <MakeRemoveAdmin isAdmin={isAdmin} removeAdmin={removeAdmin} makeNewAdmin={makeNewAdmin} ></MakeRemoveAdmin> }></Route>\n                <Route path={ROUTES.ADMIN_LIST_JOBS} element = { <AdminOnlyJobs isAdmin={isAdmin} jobs={jobs}></AdminOnlyJobs> }></Route>\n                <Route path={ROUTES.FORGOT_PASSWORD} element = { <ForgotPassword resetPasswordEmail={resetPasswordEmail} ></ForgotPassword> }></Route>\n\n              </Routes>\n            </div>\n\n            <Footer/>\n\n          </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}